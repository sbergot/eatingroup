* eatingroup
** initial tests
*** DONE sync handler
*** DONE async handler
*** DONE static file
*** DONE bootstrap
*** DONE websocket
*** DONE knockout.js
** design
   single page web app.
   the page present a list of eating group. At the bottom of the page,
   a big button allows to create a new group.
*** eating group informations
**** DONE eating plan
     text field. The user can specify the place, the type of food,
     etc. There is no imposed format.
**** DONE names of people in the group
**** DONE time before departure
**** TODO automatically decreases time every seconds
*** creation
    the user must provide all the group information except the number
    of people. When he clicks ok, the group is created/published, and
    he automatically joins it.
**** DONE fade-out create button
**** DONE fade-in form
**** TODO on complete, add the group to the view model
**** TODO send new group to server
*** broacast groups to clients
**** TODO the server notifies all client
**** TODO clients send their model to the server
**** TODO the server compares the client data to its own
     and send a response with three sets of commands. Groups are
     identified by unique IDs.
***** TODO add missing groups
***** TODO remove unexpected groups
***** TODO update the members for the others
*** TODO join
    a user can join an existing group. All other users are updated. If
    the user was in a group, he quits the current group. A user is
    identified with its ID.
*** TODO user infos
    the user can select a name in the navbar to be displayed in the
    joined group. The user is affected an invisible id stored in a
    cookie
*** TODO destruction
    if a group is empty, it is automatically destroyed
*** TODO departure
    when the departure time is reached, a big modal window warns the
    user.
*** postpone
    someone can ask to postpone the departure. If the majority of
    people accept, the departure is effectively postponed
